// js/widgets/mosaic.ts
import {
  parseSpec
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-spec@0.16.2/+esm";
import { throttle } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";

// js/context/index.ts
import { wasmConnector } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";
import { InstantiateContext } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-spec@0.16.2/+esm";

// js/context/duckdb.ts
import {
  getJsDelivrBundles,
  selectBundle,
  AsyncDuckDB,
  ConsoleLogger,
  LogLevel
} from "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.29.0/+esm";
async function initDuckdb() {
  const JSDELIVR_BUNDLES = getJsDelivrBundles();
  const bundle = await selectBundle(JSDELIVR_BUNDLES);
  const worker_url = URL.createObjectURL(
    new Blob([`importScripts("${bundle.mainWorker}");`], {
      type: "text/javascript"
    })
  );
  const worker = new Worker(worker_url);
  const logger = new ConsoleLogger(LogLevel.WARNING);
  const db = new AsyncDuckDB(logger, worker);
  await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
  URL.revokeObjectURL(worker_url);
  return db;
}
async function waitForTable(conn, table, { timeout = 1e4, interval = 250 } = {}) {
  const t0 = performance.now();
  while (true) {
    try {
      const res = await conn.query(
        `SELECT 1
           FROM information_schema.tables
         WHERE table_schema = 'main'
           AND table_name   = '${table}'
         LIMIT 1`
      );
      if (res.numRows) return;
    } catch (err) {
      console.log(
        `Table ${table} not yet available, trying again in ${interval}ms (error: ${err})`
      );
    }
    if (performance.now() - t0 > timeout) {
      throw new Error(`Timed out waiting for table "${table}"`);
    }
    await new Promise((r) => setTimeout(r, interval));
  }
}

// js/inputs/input.ts
import {
  coordinator,
  MosaicClient
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";
function input(InputClass, ...params) {
  const input2 = new InputClass(...params);
  coordinator().connect(input2);
  return input2.element;
}
var Input = class extends MosaicClient {
  constructor(filterBy, element, className = "input") {
    super(filterBy);
    this.element = element || document.createElement("div");
    if (className) this.element.setAttribute("class", className);
    Object.defineProperty(this.element, "value", { value: this });
  }
  activate() {
  }
};

// js/inputs/radio.ts
var Radio = class extends Input {
  constructor(options) {
    super(options.filterBy, options.element);
    const strongEl = window.document.createElement("strong");
    strongEl.innerText = "STRONG";
    this.element.appendChild(strongEl);
  }
};

// js/inputs/index.ts
var CUSTOM_INPUTS = {
  radio: (options) => input(Radio, options)
};

// js/context/index.ts
var VizContext = class extends InstantiateContext {
  constructor(conn_) {
    super();
    this.conn_ = conn_;
    this.tables_ = /* @__PURE__ */ new Set();
    this.api = { ...this.api, ...CUSTOM_INPUTS };
    this.coordinator.databaseConnector(wasmConnector({ connection: this.conn_ }));
  }
  async insertTable(table, data) {
    await this.conn_?.insertArrowFromIPCStream(data, {
      name: table,
      create: true
    });
    this.tables_.add(table);
  }
  async waitForTable(table) {
    await waitForTable(this.conn_, table);
  }
};
var VIZ_CONTEXT_KEY = Symbol.for("@@inspect-viz-context");
async function vizContext() {
  const globalScope = typeof window !== "undefined" ? window : globalThis;
  if (!globalScope[VIZ_CONTEXT_KEY]) {
    globalScope[VIZ_CONTEXT_KEY] = (async () => {
      const duckdb = await initDuckdb();
      const conn = await duckdb.connect();
      return new VizContext(conn);
    })();
  }
  return globalScope[VIZ_CONTEXT_KEY];
}

// js/widgets/mosaic.ts
async function render({ model, el }) {
  const tables = model.get("tables") || {};
  await syncTables(tables);
  const { autoFill } = renderSetup(el);
  const ctx = await vizContext();
  const inputs = new Set(
    ["menu", "search", "slider", "table"].concat(Object.keys(CUSTOM_INPUTS))
  );
  const spec = JSON.parse(model.get("spec"));
  const renderSpec = async () => {
    const targetSpec = autoFill ? responsiveSpec(spec, el) : spec;
    const ast = parseSpec(targetSpec, { inputs });
    const specEl = await astToDOM(ast, ctx);
    el.innerHTML = "";
    el.appendChild(specEl);
  };
  await renderSpec();
  if (autoFill) {
    const resizeObserver = new ResizeObserver(throttle(renderSpec));
    resizeObserver.observe(el);
    return () => {
      resizeObserver.disconnect();
    };
  }
}
async function syncTables(tables) {
  const ctx = await vizContext();
  for (const [tableName, base64Data] of Object.entries(tables)) {
    if (base64Data) {
      const binaryString = atob(base64Data);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      await ctx.insertTable(tableName, bytes);
    } else {
      await ctx.waitForTable(tableName);
    }
  }
}
function renderSetup(containerEl) {
  const widgetEl = containerEl.closest(".widget-subarea");
  if (widgetEl) {
    widgetEl.style.marginBottom = "0";
  }
  const autoFill = window.document.body.classList.contains("quarto-dashboard") && window.document.body.classList.contains("dashboard-fill");
  return { autoFill };
}
function responsiveSpec(spec, containerEl) {
  spec = structuredClone(spec);
  if ("plot" in spec) {
    const plot = spec.plot[0];
    if ("width" in plot && "height" in plot) {
      plot.width = containerEl.clientWidth;
      plot.height = containerEl.clientHeight;
    }
  } else if ("hconcat" in spec) {
    const hconcat = spec.hconcat;
    if ("plot" in hconcat[0]) {
      hconcat[0].width = containerEl.clientWidth;
      hconcat[0].height = containerEl.clientHeight;
    }
  } else if ("vconcat" in spec) {
    const vconcat = spec.vconcat;
    if ("plot" in vconcat[0]) {
      vconcat[0].width = containerEl.clientWidth;
      vconcat[0].height = containerEl.clientHeight;
    }
  }
  return spec;
}
async function astToDOM(ast, ctx) {
  for (const [name, node] of Object.entries(ast.params)) {
    if (!ctx.activeParams.has(name)) {
      const param = node.instantiate(ctx);
      ctx.activeParams.set(name, param);
    }
  }
  return ast.root.instantiate(ctx);
}
var mosaic_default = { render };
export {
  mosaic_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vanMvd2lkZ2V0cy9tb3NhaWMudHMiLCAiLi4vLi4vLi4vanMvY29udGV4dC9pbmRleC50cyIsICIuLi8uLi8uLi9qcy9jb250ZXh0L2R1Y2tkYi50cyIsICIuLi8uLi8uLi9qcy9pbnB1dHMvaW5wdXQudHMiLCAiLi4vLi4vLi4vanMvaW5wdXRzL3JhZGlvLnRzIiwgIi4uLy4uLy4uL2pzL2lucHV0cy9pbmRleC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBSZW5kZXJQcm9wcyB9IGZyb20gJ0Bhbnl3aWRnZXQvdHlwZXMnO1xuXG5pbXBvcnQge1xuICAgIFNwZWMsXG4gICAgU3BlY05vZGUsXG4gICAgcGFyc2VTcGVjLFxuICAgIEluc3RhbnRpYXRlQ29udGV4dCxcbiAgICBBU1ROb2RlLFxufSBmcm9tICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0B1d2RhdGEvbW9zYWljLXNwZWNAMC4xNi4yLytlc20nO1xuXG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHV3ZGF0YS9tb3NhaWMtY29yZUAwLjE2LjIvK2VzbSc7XG5cbmltcG9ydCB7IHZpekNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IENVU1RPTV9JTlBVVFMgfSBmcm9tICcuLi9pbnB1dHMnO1xuXG5pbnRlcmZhY2UgTW9zYWljUHJvcHMge1xuICAgIHRhYmxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICBzcGVjOiBzdHJpbmc7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlbmRlcih7IG1vZGVsLCBlbCB9OiBSZW5kZXJQcm9wczxNb3NhaWNQcm9wcz4pIHtcbiAgICAvLyBpbnNlcnQvd2FpdCBmb3IgdGFibGVzIHRvIGJlIHJlYWR5XG4gICAgY29uc3QgdGFibGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gbW9kZWwuZ2V0KCd0YWJsZXMnKSB8fCB7fTtcbiAgICBhd2FpdCBzeW5jVGFibGVzKHRhYmxlcyk7XG5cbiAgICAvLyByZW5kZXIgbW9zYWljIHNwZWNcbiAgICBjb25zdCB7IGF1dG9GaWxsIH0gPSByZW5kZXJTZXR1cChlbCk7XG4gICAgY29uc3QgY3R4ID0gYXdhaXQgdml6Q29udGV4dCgpO1xuICAgIGNvbnN0IGlucHV0cyA9IG5ldyBTZXQoXG4gICAgICAgIFsnbWVudScsICdzZWFyY2gnLCAnc2xpZGVyJywgJ3RhYmxlJ10uY29uY2F0KE9iamVjdC5rZXlzKENVU1RPTV9JTlBVVFMpKVxuICAgICk7XG4gICAgY29uc3Qgc3BlYzogU3BlYyA9IEpTT04ucGFyc2UobW9kZWwuZ2V0KCdzcGVjJykpO1xuICAgIGNvbnN0IHJlbmRlclNwZWMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldFNwZWMgPSBhdXRvRmlsbCA/IHJlc3BvbnNpdmVTcGVjKHNwZWMsIGVsKSA6IHNwZWM7XG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlU3BlYyh0YXJnZXRTcGVjLCB7IGlucHV0cyB9KTtcbiAgICAgICAgY29uc3Qgc3BlY0VsID0gYXdhaXQgYXN0VG9ET00oYXN0LCBjdHgpO1xuICAgICAgICBlbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoc3BlY0VsKTtcbiAgICB9O1xuICAgIGF3YWl0IHJlbmRlclNwZWMoKTtcblxuICAgIC8vIGlmIHdlIGFyZSBkb2luZyBhdXRvLWZpbGwgdGhlbiByZS1yZW5kZXIgd2hlbiBzaXplIGNoYW5nZXNcbiAgICBpZiAoYXV0b0ZpbGwpIHtcbiAgICAgICAgLy8gcmUtcmVuZGVyIG9uIGNvbnRhaW5lciBzaXplIGNoYW5nZWRcbiAgICAgICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIodGhyb3R0bGUocmVuZGVyU3BlYykpO1xuICAgICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsKTtcblxuICAgICAgICAvLyBjbGVhbnVwIHJlc2l6ZSBvYnNlcnZlciBvbiBkaXNjb25uZWN0XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyBpbnNlcnQvd2FpdCBmb3IgdGFibGVzIHRvIGJlIHJlYWR5XG5hc3luYyBmdW5jdGlvbiBzeW5jVGFibGVzKHRhYmxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPikge1xuICAgIGNvbnN0IGN0eCA9IGF3YWl0IHZpekNvbnRleHQoKTtcbiAgICBmb3IgKGNvbnN0IFt0YWJsZU5hbWUsIGJhc2U2NERhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHRhYmxlcykpIHtcbiAgICAgICAgaWYgKGJhc2U2NERhdGEpIHtcbiAgICAgICAgICAgIC8vIGRlY29kZSBiYXNlNjQgdG8gYnl0ZXNcbiAgICAgICAgICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IGF0b2IoYmFzZTY0RGF0YSk7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJpbmFyeVN0cmluZy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5hcnlTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBieXRlc1tpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbnNlcnQgdGFibGUgaW50byBjb250ZXh0XG4gICAgICAgICAgICBhd2FpdCBjdHguaW5zZXJ0VGFibGUodGFibGVOYW1lLCBieXRlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB3YWl0IGZvciB0YWJsZSBpZiBubyBkYXRhIHByb3ZpZGVkXG4gICAgICAgICAgICBhd2FpdCBjdHgud2FpdEZvclRhYmxlKHRhYmxlTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmludGVyZmFjZSBSZW5kZXJPcHRpb25zIHtcbiAgICBhdXRvRmlsbDogYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2V0dXAoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogUmVuZGVyT3B0aW9ucyB7XG4gICAgLy8gbW9zYWljIHdpZGdldHMgYWxyZWFkeSBoYXZlIHN1ZmZpY2llbnQgbWFyZ2luL3BhZGRpbmcgc28gb3ZlcnJpZGVcbiAgICAvLyBhbnkgaG9zdCBwcmVzY3JpYmVkIGJvdHRvbSBtYXJnaW4uXG4gICAgY29uc3Qgd2lkZ2V0RWwgPSBjb250YWluZXJFbC5jbG9zZXN0KCcud2lkZ2V0LXN1YmFyZWEnKSBhcyBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBpZiAod2lkZ2V0RWwpIHtcbiAgICAgICAgd2lkZ2V0RWwuc3R5bGUubWFyZ2luQm90dG9tID0gJzAnO1xuICAgIH1cblxuICAgIC8vIGRldGVjdCB3aGV0aGVyIHdlIHNob3VsZCBiZSBhdXRvLWZpbGxpbmcgb3VyIGNvbnRhaW5lclxuICAgIGNvbnN0IGF1dG9GaWxsID1cbiAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdxdWFydG8tZGFzaGJvYXJkJykgJiZcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdkYXNoYm9hcmQtZmlsbCcpO1xuXG4gICAgcmV0dXJuIHsgYXV0b0ZpbGwgfTtcbn1cblxuZnVuY3Rpb24gcmVzcG9uc2l2ZVNwZWMoc3BlYzogU3BlYywgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogU3BlYyB7XG4gICAgc3BlYyA9IHN0cnVjdHVyZWRDbG9uZShzcGVjKTtcbiAgICBpZiAoJ3Bsb3QnIGluIHNwZWMpIHtcbiAgICAgICAgY29uc3QgcGxvdCA9IHNwZWMucGxvdFswXTtcbiAgICAgICAgaWYgKCd3aWR0aCcgaW4gcGxvdCAmJiAnaGVpZ2h0JyBpbiBwbG90KSB7XG4gICAgICAgICAgICBwbG90LndpZHRoID0gY29udGFpbmVyRWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBwbG90LmhlaWdodCA9IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoJ2hjb25jYXQnIGluIHNwZWMpIHtcbiAgICAgICAgY29uc3QgaGNvbmNhdCA9IHNwZWMuaGNvbmNhdDtcbiAgICAgICAgaWYgKCdwbG90JyBpbiBoY29uY2F0WzBdKSB7XG4gICAgICAgICAgICBoY29uY2F0WzBdLndpZHRoID0gY29udGFpbmVyRWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBoY29uY2F0WzBdLmhlaWdodCA9IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoJ3Zjb25jYXQnIGluIHNwZWMpIHtcbiAgICAgICAgY29uc3QgdmNvbmNhdCA9IHNwZWMudmNvbmNhdDtcbiAgICAgICAgaWYgKCdwbG90JyBpbiB2Y29uY2F0WzBdKSB7XG4gICAgICAgICAgICB2Y29uY2F0WzBdLndpZHRoID0gY29udGFpbmVyRWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICB2Y29uY2F0WzBdLmhlaWdodCA9IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3BlYztcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXN0VG9ET00oYXN0OiBTcGVjTm9kZSwgY3R4OiBJbnN0YW50aWF0ZUNvbnRleHQpIHtcbiAgICAvLyBwcm9jZXNzIHBhcmFtL3NlbGVjdGlvbiBkZWZpbml0aW9uc1xuICAgIGZvciAoY29uc3QgW25hbWUsIG5vZGVdIG9mIE9iamVjdC5lbnRyaWVzKGFzdC5wYXJhbXMpKSB7XG4gICAgICAgIC8vIHNraXAgZGVmaW5pdGlvbnMgd2l0aCBuYW1lcyBhbHJlYWR5IGRlZmluZWRcbiAgICAgICAgaWYgKCFjdHguYWN0aXZlUGFyYW1zLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSAobm9kZSBhcyBBU1ROb2RlKS5pbnN0YW50aWF0ZShjdHgpO1xuICAgICAgICAgICAgY3R4LmFjdGl2ZVBhcmFtcy5zZXQobmFtZSwgcGFyYW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaW5zdGFudGlhdGUgYW5kIHJldHVybiBlbGVtZW50XG4gICAgcmV0dXJuIGFzdC5yb290Lmluc3RhbnRpYXRlKGN0eCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgcmVuZGVyIH07XG4iLCAiaW1wb3J0IHsgQXN5bmNEdWNrREJDb25uZWN0aW9uIH0gZnJvbSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AZHVja2RiL2R1Y2tkYi13YXNtQDEuMjkuMC8rZXNtJztcblxuaW1wb3J0IHsgd2FzbUNvbm5lY3RvciB9IGZyb20gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHV3ZGF0YS9tb3NhaWMtY29yZUAwLjE2LjIvK2VzbSc7XG5cbmltcG9ydCB7IEluc3RhbnRpYXRlQ29udGV4dCB9IGZyb20gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHV3ZGF0YS9tb3NhaWMtc3BlY0AwLjE2LjIvK2VzbSc7XG5cbmltcG9ydCB7IGluaXREdWNrZGIsIHdhaXRGb3JUYWJsZSB9IGZyb20gJy4vZHVja2RiJztcbmltcG9ydCB7IENVU1RPTV9JTlBVVFMgfSBmcm9tICcuLi9pbnB1dHMnO1xuXG5jbGFzcyBWaXpDb250ZXh0IGV4dGVuZHMgSW5zdGFudGlhdGVDb250ZXh0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRhYmxlc18gPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29ubl86IEFzeW5jRHVja0RCQ29ubmVjdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFwaSA9IHsgLi4udGhpcy5hcGksIC4uLkNVU1RPTV9JTlBVVFMgfTtcbiAgICAgICAgdGhpcy5jb29yZGluYXRvci5kYXRhYmFzZUNvbm5lY3Rvcih3YXNtQ29ubmVjdG9yKHsgY29ubmVjdGlvbjogdGhpcy5jb25uXyB9KSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5zZXJ0VGFibGUodGFibGU6IHN0cmluZywgZGF0YTogVWludDhBcnJheSkge1xuICAgICAgICAvLyBpbnNlcnQgdGFibGUgaW50byBkYXRhYmFzZVxuICAgICAgICBhd2FpdCB0aGlzLmNvbm5fPy5pbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0oZGF0YSwge1xuICAgICAgICAgICAgbmFtZTogdGFibGUsXG4gICAgICAgICAgICBjcmVhdGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCB0byBsaXN0IG9mIHRhYmxlc1xuICAgICAgICB0aGlzLnRhYmxlc18uYWRkKHRhYmxlKTtcbiAgICB9XG5cbiAgICBhc3luYyB3YWl0Rm9yVGFibGUodGFibGU6IHN0cmluZykge1xuICAgICAgICBhd2FpdCB3YWl0Rm9yVGFibGUodGhpcy5jb25uXywgdGFibGUpO1xuICAgIH1cbn1cblxuLy8gZ2V0IHRoZSBnbG9iYWwgY29udGV4dCBpbnN0YW5jZSwgZW5zdXJpbmcgd2UgZ2V0IHRoZSBzYW1lXG4vLyBpbnN0YW5jZSBldmFsIGFjcm9zcyBkaWZmZXJlbnQganMgYnVuZGxlcyBsb2FkZWQgaW50byB0aGUgcGFnZVxuY29uc3QgVklaX0NPTlRFWFRfS0VZID0gU3ltYm9sLmZvcignQEBpbnNwZWN0LXZpei1jb250ZXh0Jyk7XG5hc3luYyBmdW5jdGlvbiB2aXpDb250ZXh0KCk6IFByb21pc2U8Vml6Q29udGV4dD4ge1xuICAgIGNvbnN0IGdsb2JhbFNjb3BlOiBhbnkgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG4gICAgaWYgKCFnbG9iYWxTY29wZVtWSVpfQ09OVEVYVF9LRVldKSB7XG4gICAgICAgIGdsb2JhbFNjb3BlW1ZJWl9DT05URVhUX0tFWV0gPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZHVja2RiID0gYXdhaXQgaW5pdER1Y2tkYigpO1xuICAgICAgICAgICAgY29uc3QgY29ubiA9IGF3YWl0IGR1Y2tkYi5jb25uZWN0KCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFZpekNvbnRleHQoY29ubik7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxTY29wZVtWSVpfQ09OVEVYVF9LRVldIGFzIFByb21pc2U8Vml6Q29udGV4dD47XG59XG5cbmV4cG9ydCB7IFZpekNvbnRleHQsIHZpekNvbnRleHQgfTtcbiIsICJpbXBvcnQge1xuICAgIGdldEpzRGVsaXZyQnVuZGxlcyxcbiAgICBzZWxlY3RCdW5kbGUsXG4gICAgQXN5bmNEdWNrREIsXG4gICAgQ29uc29sZUxvZ2dlcixcbiAgICBBc3luY0R1Y2tEQkNvbm5lY3Rpb24sXG4gICAgTG9nTGV2ZWwsXG59IGZyb20gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQGR1Y2tkYi9kdWNrZGItd2FzbUAxLjI5LjAvK2VzbSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0RHVja2RiKCkge1xuICAgIGNvbnN0IEpTREVMSVZSX0JVTkRMRVMgPSBnZXRKc0RlbGl2ckJ1bmRsZXMoKTtcblxuICAgIC8vIFNlbGVjdCBhIGJ1bmRsZSBiYXNlZCBvbiBicm93c2VyIGNoZWNrc1xuICAgIGNvbnN0IGJ1bmRsZSA9IGF3YWl0IHNlbGVjdEJ1bmRsZShKU0RFTElWUl9CVU5ETEVTKTtcblxuICAgIGNvbnN0IHdvcmtlcl91cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKFxuICAgICAgICBuZXcgQmxvYihbYGltcG9ydFNjcmlwdHMoXCIke2J1bmRsZS5tYWluV29ya2VyIX1cIik7YF0sIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnLFxuICAgICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgYXN5bmNocm9ub3VzIHZlcnNpb24gb2YgRHVja0RCLXdhc21cbiAgICBjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlcl91cmwpO1xuICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKExvZ0xldmVsLldBUk5JTkcpO1xuICAgIGNvbnN0IGRiID0gbmV3IEFzeW5jRHVja0RCKGxvZ2dlciwgd29ya2VyKTtcbiAgICBhd2FpdCBkYi5pbnN0YW50aWF0ZShidW5kbGUubWFpbk1vZHVsZSwgYnVuZGxlLnB0aHJlYWRXb3JrZXIpO1xuICAgIFVSTC5yZXZva2VPYmplY3RVUkwod29ya2VyX3VybCk7XG5cbiAgICByZXR1cm4gZGI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yVGFibGUoXG4gICAgY29ubjogQXN5bmNEdWNrREJDb25uZWN0aW9uLFxuICAgIHRhYmxlOiBzdHJpbmcsXG4gICAgeyB0aW1lb3V0ID0gMTBfMDAwLCBpbnRlcnZhbCA9IDI1MCB9ID0ge31cbikge1xuICAgIGNvbnN0IHQwID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgY29ubi5xdWVyeShcbiAgICAgICAgICAgICAgICBgU0VMRUNUIDFcbiAgICAgICAgICAgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzXG4gICAgICAgICBXSEVSRSB0YWJsZV9zY2hlbWEgPSAnbWFpbidcbiAgICAgICAgICAgQU5EIHRhYmxlX25hbWUgICA9ICcke3RhYmxlfSdcbiAgICAgICAgIExJTUlUIDFgXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAocmVzLm51bVJvd3MpIHJldHVybjsgLy8gc3VjY2VzcyBcdTI3MjhcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgVGFibGUgJHt0YWJsZX0gbm90IHlldCBhdmFpbGFibGUsIHRyeWluZyBhZ2FpbiBpbiAke2ludGVydmFsfW1zIChlcnJvcjogJHtlcnJ9KWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVyZm9ybWFuY2Uubm93KCkgLSB0MCA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGltZWQgb3V0IHdhaXRpbmcgZm9yIHRhYmxlIFwiJHt0YWJsZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBpbnRlcnZhbCkpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQge1xuICAgIGNvb3JkaW5hdG9yLFxuICAgIE1vc2FpY0NsaWVudCxcbiAgICBTZWxlY3Rpb24sXG59IGZyb20gJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHV3ZGF0YS9tb3NhaWMtY29yZUAwLjE2LjIvK2VzbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRPcHRpb25zIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBmaWx0ZXJCeTogU2VsZWN0aW9uO1xufVxuXG5leHBvcnQgdHlwZSBJbnB1dEZ1bmN0aW9uID0gKG9wdGlvbnM6IElucHV0T3B0aW9ucykgPT4gSFRNTEVsZW1lbnQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnB1dDxUIGV4dGVuZHMgbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gSW5wdXQ+KFxuICAgIElucHV0Q2xhc3M6IFQsXG4gICAgLi4ucGFyYW1zOiBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8VD5cbik6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBpbnB1dCA9IG5ldyBJbnB1dENsYXNzKC4uLnBhcmFtcyk7XG4gICAgY29vcmRpbmF0b3IoKS5jb25uZWN0KGlucHV0KTtcbiAgICByZXR1cm4gaW5wdXQuZWxlbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIElucHV0IGV4dGVuZHMgTW9zYWljQ2xpZW50IHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoZmlsdGVyQnk6IFNlbGVjdGlvbiwgZWxlbWVudDogSFRNTEVsZW1lbnQsIGNsYXNzTmFtZTogc3RyaW5nID0gJ2lucHV0Jykge1xuICAgICAgICBzdXBlcihmaWx0ZXJCeSk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGlmIChjbGFzc05hbWUpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NOYW1lKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZWxlbWVudCwgJ3ZhbHVlJywgeyB2YWx1ZTogdGhpcyB9KTtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgLy8gc3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGVcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgSW5wdXRPcHRpb25zLCBJbnB1dCB9IGZyb20gJy4vaW5wdXQnO1xuXG5leHBvcnQgY2xhc3MgUmFkaW8gZXh0ZW5kcyBJbnB1dCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSW5wdXRPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMuZmlsdGVyQnksIG9wdGlvbnMuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHN0cm9uZ0VsID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICBzdHJvbmdFbC5pbm5lclRleHQgPSAnU1RST05HJztcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUmFkaW8gfSBmcm9tICcuL3JhZGlvJztcbmltcG9ydCB7IGlucHV0LCBJbnB1dEZ1bmN0aW9uIH0gZnJvbSAnLi9pbnB1dCc7XG5cbmV4cG9ydCBjb25zdCBDVVNUT01fSU5QVVRTOiBSZWNvcmQ8c3RyaW5nLCBJbnB1dEZ1bmN0aW9uPiA9IHtcbiAgICByYWRpbzogb3B0aW9ucyA9PiBpbnB1dChSYWRpbywgb3B0aW9ucyksXG59O1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVBO0FBQUEsRUFHSTtBQUFBLE9BR0c7QUFFUCxTQUFTLGdCQUFnQjs7O0FDUnpCLFNBQVMscUJBQXFCO0FBRTlCLFNBQVMsMEJBQTBCOzs7QUNKbkM7QUFBQSxFQUNJO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFFQTtBQUFBLE9BQ0c7QUFFUCxlQUFzQixhQUFhO0FBQy9CLFFBQU0sbUJBQW1CLG1CQUFtQjtBQUc1QyxRQUFNLFNBQVMsTUFBTSxhQUFhLGdCQUFnQjtBQUVsRCxRQUFNLGFBQWEsSUFBSTtBQUFBLElBQ25CLElBQUksS0FBSyxDQUFDLGtCQUFrQixPQUFPLFVBQVcsS0FBSyxHQUFHO0FBQUEsTUFDbEQsTUFBTTtBQUFBLElBQ1YsQ0FBQztBQUFBLEVBQ0w7QUFHQSxRQUFNLFNBQVMsSUFBSSxPQUFPLFVBQVU7QUFDcEMsUUFBTSxTQUFTLElBQUksY0FBYyxTQUFTLE9BQU87QUFDakQsUUFBTSxLQUFLLElBQUksWUFBWSxRQUFRLE1BQU07QUFDekMsUUFBTSxHQUFHLFlBQVksT0FBTyxZQUFZLE9BQU8sYUFBYTtBQUM1RCxNQUFJLGdCQUFnQixVQUFVO0FBRTlCLFNBQU87QUFDWDtBQUVBLGVBQXNCLGFBQ2xCLE1BQ0EsT0FDQSxFQUFFLFVBQVUsS0FBUSxXQUFXLElBQUksSUFBSSxDQUFDLEdBQzFDO0FBQ0UsUUFBTSxLQUFLLFlBQVksSUFBSTtBQUUzQixTQUFPLE1BQU07QUFDVCxRQUFJO0FBQ0EsWUFBTSxNQUFNLE1BQU0sS0FBSztBQUFBLFFBQ25CO0FBQUE7QUFBQTtBQUFBLGlDQUdpQixLQUFLO0FBQUE7QUFBQSxNQUUxQjtBQUVBLFVBQUksSUFBSSxRQUFTO0FBQUEsSUFDckIsU0FBUyxLQUFLO0FBQ1YsY0FBUTtBQUFBLFFBQ0osU0FBUyxLQUFLLHVDQUF1QyxRQUFRLGNBQWMsR0FBRztBQUFBLE1BQ2xGO0FBQUEsSUFDSjtBQUVBLFFBQUksWUFBWSxJQUFJLElBQUksS0FBSyxTQUFTO0FBQ2xDLFlBQU0sSUFBSSxNQUFNLGdDQUFnQyxLQUFLLEdBQUc7QUFBQSxJQUM1RDtBQUNBLFVBQU0sSUFBSSxRQUFRLE9BQUssV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUFBLEVBQ2xEO0FBQ0o7OztBQzVEQTtBQUFBLEVBQ0k7QUFBQSxFQUNBO0FBQUEsT0FFRztBQVNBLFNBQVMsTUFDWixlQUNHLFFBQ1E7QUFDWCxRQUFNQSxTQUFRLElBQUksV0FBVyxHQUFHLE1BQU07QUFDdEMsY0FBWSxFQUFFLFFBQVFBLE1BQUs7QUFDM0IsU0FBT0EsT0FBTTtBQUNqQjtBQUVPLElBQU0sUUFBTixjQUFvQixhQUFhO0FBQUEsRUFFcEMsWUFBWSxVQUFxQixTQUFzQixZQUFvQixTQUFTO0FBQ2hGLFVBQU0sUUFBUTtBQUNkLFNBQUssVUFBVSxXQUFXLFNBQVMsY0FBYyxLQUFLO0FBQ3RELFFBQUksVUFBVyxNQUFLLFFBQVEsYUFBYSxTQUFTLFNBQVM7QUFDM0QsV0FBTyxlQUFlLEtBQUssU0FBUyxTQUFTLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBQSxFQUNoRTtBQUFBLEVBRUEsV0FBVztBQUFBLEVBRVg7QUFDSjs7O0FDaENPLElBQU0sUUFBTixjQUFvQixNQUFNO0FBQUEsRUFDN0IsWUFBWSxTQUF1QjtBQUMvQixVQUFNLFFBQVEsVUFBVSxRQUFRLE9BQU87QUFDdkMsVUFBTSxXQUFXLE9BQU8sU0FBUyxjQUFjLFFBQVE7QUFDdkQsYUFBUyxZQUFZO0FBQ3JCLFNBQUssUUFBUSxZQUFZLFFBQVE7QUFBQSxFQUNyQztBQUNKOzs7QUNOTyxJQUFNLGdCQUErQztBQUFBLEVBQ3hELE9BQU8sYUFBVyxNQUFNLE9BQU8sT0FBTztBQUMxQzs7O0FKSUEsSUFBTSxhQUFOLGNBQXlCLG1CQUFtQjtBQUFBLEVBR3hDLFlBQTZCLE9BQThCO0FBQ3ZELFVBQU07QUFEbUI7QUFGN0IsU0FBaUIsVUFBVSxvQkFBSSxJQUFZO0FBSXZDLFNBQUssTUFBTSxFQUFFLEdBQUcsS0FBSyxLQUFLLEdBQUcsY0FBYztBQUMzQyxTQUFLLFlBQVksa0JBQWtCLGNBQWMsRUFBRSxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUM7QUFBQSxFQUNoRjtBQUFBLEVBRUEsTUFBTSxZQUFZLE9BQWUsTUFBa0I7QUFFL0MsVUFBTSxLQUFLLE9BQU8seUJBQXlCLE1BQU07QUFBQSxNQUM3QyxNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsSUFDWixDQUFDO0FBR0QsU0FBSyxRQUFRLElBQUksS0FBSztBQUFBLEVBQzFCO0FBQUEsRUFFQSxNQUFNLGFBQWEsT0FBZTtBQUM5QixVQUFNLGFBQWEsS0FBSyxPQUFPLEtBQUs7QUFBQSxFQUN4QztBQUNKO0FBSUEsSUFBTSxrQkFBa0IsT0FBTyxJQUFJLHVCQUF1QjtBQUMxRCxlQUFlLGFBQWtDO0FBQzdDLFFBQU0sY0FBbUIsT0FBTyxXQUFXLGNBQWMsU0FBUztBQUNsRSxNQUFJLENBQUMsWUFBWSxlQUFlLEdBQUc7QUFDL0IsZ0JBQVksZUFBZSxLQUFLLFlBQVk7QUFDeEMsWUFBTSxTQUFTLE1BQU0sV0FBVztBQUNoQyxZQUFNLE9BQU8sTUFBTSxPQUFPLFFBQVE7QUFDbEMsYUFBTyxJQUFJLFdBQVcsSUFBSTtBQUFBLElBQzlCLEdBQUc7QUFBQSxFQUNQO0FBQ0EsU0FBTyxZQUFZLGVBQWU7QUFDdEM7OztBRDNCQSxlQUFlLE9BQU8sRUFBRSxPQUFPLEdBQUcsR0FBNkI7QUFFM0QsUUFBTSxTQUFpQyxNQUFNLElBQUksUUFBUSxLQUFLLENBQUM7QUFDL0QsUUFBTSxXQUFXLE1BQU07QUFHdkIsUUFBTSxFQUFFLFNBQVMsSUFBSSxZQUFZLEVBQUU7QUFDbkMsUUFBTSxNQUFNLE1BQU0sV0FBVztBQUM3QixRQUFNLFNBQVMsSUFBSTtBQUFBLElBQ2YsQ0FBQyxRQUFRLFVBQVUsVUFBVSxPQUFPLEVBQUUsT0FBTyxPQUFPLEtBQUssYUFBYSxDQUFDO0FBQUEsRUFDM0U7QUFDQSxRQUFNLE9BQWEsS0FBSyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUM7QUFDL0MsUUFBTSxhQUFhLFlBQVk7QUFDM0IsVUFBTSxhQUFhLFdBQVcsZUFBZSxNQUFNLEVBQUUsSUFBSTtBQUN6RCxVQUFNLE1BQU0sVUFBVSxZQUFZLEVBQUUsT0FBTyxDQUFDO0FBQzVDLFVBQU0sU0FBUyxNQUFNLFNBQVMsS0FBSyxHQUFHO0FBQ3RDLE9BQUcsWUFBWTtBQUNmLE9BQUcsWUFBWSxNQUFNO0FBQUEsRUFDekI7QUFDQSxRQUFNLFdBQVc7QUFHakIsTUFBSSxVQUFVO0FBRVYsVUFBTSxpQkFBaUIsSUFBSSxlQUFlLFNBQVMsVUFBVSxDQUFDO0FBQzlELG1CQUFlLFFBQVEsRUFBRTtBQUd6QixXQUFPLE1BQU07QUFDVCxxQkFBZSxXQUFXO0FBQUEsSUFDOUI7QUFBQSxFQUNKO0FBQ0o7QUFHQSxlQUFlLFdBQVcsUUFBZ0M7QUFDdEQsUUFBTSxNQUFNLE1BQU0sV0FBVztBQUM3QixhQUFXLENBQUMsV0FBVyxVQUFVLEtBQUssT0FBTyxRQUFRLE1BQU0sR0FBRztBQUMxRCxRQUFJLFlBQVk7QUFFWixZQUFNLGVBQWUsS0FBSyxVQUFVO0FBQ3BDLFlBQU0sUUFBUSxJQUFJLFdBQVcsYUFBYSxNQUFNO0FBQ2hELGVBQVMsSUFBSSxHQUFHLElBQUksYUFBYSxRQUFRLEtBQUs7QUFDMUMsY0FBTSxDQUFDLElBQUksYUFBYSxXQUFXLENBQUM7QUFBQSxNQUN4QztBQUdBLFlBQU0sSUFBSSxZQUFZLFdBQVcsS0FBSztBQUFBLElBQzFDLE9BQU87QUFFSCxZQUFNLElBQUksYUFBYSxTQUFTO0FBQUEsSUFDcEM7QUFBQSxFQUNKO0FBQ0o7QUFNQSxTQUFTLFlBQVksYUFBeUM7QUFHMUQsUUFBTSxXQUFXLFlBQVksUUFBUSxpQkFBaUI7QUFDdEQsTUFBSSxVQUFVO0FBQ1YsYUFBUyxNQUFNLGVBQWU7QUFBQSxFQUNsQztBQUdBLFFBQU0sV0FDRixPQUFPLFNBQVMsS0FBSyxVQUFVLFNBQVMsa0JBQWtCLEtBQzFELE9BQU8sU0FBUyxLQUFLLFVBQVUsU0FBUyxnQkFBZ0I7QUFFNUQsU0FBTyxFQUFFLFNBQVM7QUFDdEI7QUFFQSxTQUFTLGVBQWUsTUFBWSxhQUFnQztBQUNoRSxTQUFPLGdCQUFnQixJQUFJO0FBQzNCLE1BQUksVUFBVSxNQUFNO0FBQ2hCLFVBQU0sT0FBTyxLQUFLLEtBQUssQ0FBQztBQUN4QixRQUFJLFdBQVcsUUFBUSxZQUFZLE1BQU07QUFDckMsV0FBSyxRQUFRLFlBQVk7QUFDekIsV0FBSyxTQUFTLFlBQVk7QUFBQSxJQUM5QjtBQUFBLEVBQ0osV0FBVyxhQUFhLE1BQU07QUFDMUIsVUFBTSxVQUFVLEtBQUs7QUFDckIsUUFBSSxVQUFVLFFBQVEsQ0FBQyxHQUFHO0FBQ3RCLGNBQVEsQ0FBQyxFQUFFLFFBQVEsWUFBWTtBQUMvQixjQUFRLENBQUMsRUFBRSxTQUFTLFlBQVk7QUFBQSxJQUNwQztBQUFBLEVBQ0osV0FBVyxhQUFhLE1BQU07QUFDMUIsVUFBTSxVQUFVLEtBQUs7QUFDckIsUUFBSSxVQUFVLFFBQVEsQ0FBQyxHQUFHO0FBQ3RCLGNBQVEsQ0FBQyxFQUFFLFFBQVEsWUFBWTtBQUMvQixjQUFRLENBQUMsRUFBRSxTQUFTLFlBQVk7QUFBQSxJQUNwQztBQUFBLEVBQ0o7QUFDQSxTQUFPO0FBQ1g7QUFFQSxlQUFlLFNBQVMsS0FBZSxLQUF5QjtBQUU1RCxhQUFXLENBQUMsTUFBTSxJQUFJLEtBQUssT0FBTyxRQUFRLElBQUksTUFBTSxHQUFHO0FBRW5ELFFBQUksQ0FBQyxJQUFJLGFBQWEsSUFBSSxJQUFJLEdBQUc7QUFDN0IsWUFBTSxRQUFTLEtBQWlCLFlBQVksR0FBRztBQUMvQyxVQUFJLGFBQWEsSUFBSSxNQUFNLEtBQUs7QUFBQSxJQUNwQztBQUFBLEVBQ0o7QUFHQSxTQUFPLElBQUksS0FBSyxZQUFZLEdBQUc7QUFDbkM7QUFFQSxJQUFPLGlCQUFRLEVBQUUsT0FBTzsiLAogICJuYW1lcyI6IFsiaW5wdXQiXQp9Cg==
