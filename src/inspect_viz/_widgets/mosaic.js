// js/widgets/mosaic.ts
import {
  parseSpec
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-spec@0.16.2/+esm";
import { throttle } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";

// js/context/index.ts
import { wasmConnector } from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";
import {
  InstantiateContext,
  PlotAttributeNode,
  LiteralNode
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-spec@0.16.2/+esm";

// js/context/duckdb.ts
import {
  getJsDelivrBundles,
  selectBundle,
  AsyncDuckDB,
  ConsoleLogger,
  LogLevel
} from "https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.29.0/+esm";
async function initDuckdb() {
  const JSDELIVR_BUNDLES = getJsDelivrBundles();
  const bundle = await selectBundle(JSDELIVR_BUNDLES);
  const worker_url = URL.createObjectURL(
    new Blob([`importScripts("${bundle.mainWorker}");`], {
      type: "text/javascript"
    })
  );
  const worker = new Worker(worker_url);
  const logger = new ConsoleLogger(LogLevel.WARNING);
  const db = new AsyncDuckDB(logger, worker);
  await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
  URL.revokeObjectURL(worker_url);
  return db;
}
async function waitForTable(conn, table, { timeout = 1e4, interval = 250 } = {}) {
  const t0 = performance.now();
  while (true) {
    try {
      const res = await conn.query(
        `SELECT 1
           FROM information_schema.tables
         WHERE table_schema = 'main'
           AND table_name   = '${table}'
         LIMIT 1`
      );
      if (res.numRows) return;
    } catch (err) {
      console.log(
        `Table ${table} not yet available, trying again in ${interval}ms (error: ${err})`
      );
    }
    if (performance.now() - t0 > timeout) {
      throw new Error(`Timed out waiting for table "${table}"`);
    }
    await new Promise((r) => setTimeout(r, interval));
  }
}

// js/inputs/input.ts
import {
  coordinator,
  MosaicClient
} from "https://cdn.jsdelivr.net/npm/@uwdata/mosaic-core@0.16.2/+esm";
function input(InputClass, ...params) {
  const input2 = new InputClass(...params);
  coordinator().connect(input2);
  return input2.element;
}
var Input = class extends MosaicClient {
  constructor(filterBy, element, className = "input") {
    super(filterBy);
    this.element = element || document.createElement("div");
    if (className) this.element.setAttribute("class", className);
    Object.defineProperty(this.element, "value", { value: this });
  }
  activate() {
  }
};

// js/inputs/radio.ts
var Radio = class extends Input {
  constructor(options) {
    super(options.filterBy, options.element);
    const strongEl = window.document.createElement("strong");
    strongEl.innerText = "STRONG";
    this.element.appendChild(strongEl);
  }
};

// js/inputs/index.ts
var CUSTOM_INPUTS = {
  radio: (options) => input(Radio, options)
};

// js/context/index.ts
var VizContext = class extends InstantiateContext {
  constructor(conn_) {
    const styleAttrib = new PlotAttributeNode("attribute");
    styleAttrib.name = "style";
    styleAttrib.value = new LiteralNode({
      fontSize: "12px"
    });
    super({
      plotDefaults: [styleAttrib]
    });
    this.conn_ = conn_;
    this.tables_ = /* @__PURE__ */ new Set();
    this.api = { ...this.api, ...CUSTOM_INPUTS };
    this.coordinator.databaseConnector(wasmConnector({ connection: this.conn_ }));
  }
  async insertTable(table, data) {
    await this.conn_?.insertArrowFromIPCStream(data, {
      name: table,
      create: true
    });
    this.tables_.add(table);
  }
  async waitForTable(table) {
    await waitForTable(this.conn_, table);
  }
};
var VIZ_CONTEXT_KEY = Symbol.for("@@inspect-viz-context");
async function vizContext() {
  const globalScope = typeof window !== "undefined" ? window : globalThis;
  if (!globalScope[VIZ_CONTEXT_KEY]) {
    globalScope[VIZ_CONTEXT_KEY] = (async () => {
      const duckdb = await initDuckdb();
      const conn = await duckdb.connect();
      return new VizContext(conn);
    })();
  }
  return globalScope[VIZ_CONTEXT_KEY];
}

// js/widgets/mosaic.ts
async function render({ model, el }) {
  const tables = model.get("tables") || {};
  await syncTables(tables);
  const renderOptions = renderSetup(el);
  const ctx = await vizContext();
  const inputs = new Set(
    ["menu", "search", "slider", "table"].concat(Object.keys(CUSTOM_INPUTS))
  );
  const spec = JSON.parse(model.get("spec"));
  if (renderOptions.autoFillScrolling && isOutputSpec(spec)) {
    el.style.width = "100%";
    el.style.height = "400px";
  }
  const renderSpec = async () => {
    const targetSpec = renderOptions.autoFill ? responsiveSpec(spec, el) : spec;
    const ast = parseSpec(targetSpec, { inputs });
    const specEl = await astToDOM(ast, ctx);
    el.innerHTML = "";
    el.appendChild(specEl);
  };
  await renderSpec();
  if (renderOptions.autoFill) {
    const resizeObserver = new ResizeObserver(throttle(renderSpec));
    resizeObserver.observe(el);
    return () => {
      resizeObserver.disconnect();
    };
  }
}
async function syncTables(tables) {
  const ctx = await vizContext();
  for (const [tableName, base64Data] of Object.entries(tables)) {
    if (base64Data) {
      const binaryString = atob(base64Data);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      await ctx.insertTable(tableName, bytes);
    } else {
      await ctx.waitForTable(tableName);
    }
  }
}
function renderSetup(containerEl) {
  const widgetEl = containerEl.closest(".widget-subarea");
  if (widgetEl) {
    widgetEl.style.marginBottom = "0";
  }
  const autoFill = window.document.body.classList.contains("quarto-dashboard");
  const autoFillScrolling = autoFill && !window.document.body.classList.contains("dashboard-fill");
  return { autoFill, autoFillScrolling };
}
function responsiveSpec(spec, containerEl) {
  spec = structuredClone(spec);
  if ("plot" in spec) {
    const plot = spec.plot[0];
    if ("width" in plot && "height" in plot) {
      plot.width = containerEl.clientWidth;
      plot.height = containerEl.clientHeight;
    }
  } else if ("hconcat" in spec) {
    const hconcat = spec.hconcat;
    if ("plot" in hconcat[0]) {
      hconcat[0].width = containerEl.clientWidth - 80;
      hconcat[0].height = containerEl.clientHeight;
    }
  } else if ("vconcat" in spec) {
    const vconcat = spec.vconcat;
    if ("plot" in vconcat[0]) {
      vconcat[0].width = containerEl.clientWidth;
      vconcat[0].height = containerEl.clientHeight - 35;
    }
  }
  return spec;
}
function isOutputSpec(spec) {
  if ("plot" in spec) {
    return true;
  } else if ("input" in spec && spec.input === "table") {
    return true;
  } else if ("hconcat" in spec && "plot" in spec.hconcat[0]) {
    return true;
  } else if ("vconcat" in spec && "plot" in spec.vconcat[0]) {
    return true;
  } else {
    return false;
  }
}
async function astToDOM(ast, ctx) {
  for (const [name, node] of Object.entries(ast.params)) {
    if (!ctx.activeParams.has(name)) {
      const param = node.instantiate(ctx);
      ctx.activeParams.set(name, param);
    }
  }
  return ast.root.instantiate(ctx);
}
var mosaic_default = { render };
export {
  mosaic_default as default
};
//# sourceMappingURL=data:application/json;base64,
